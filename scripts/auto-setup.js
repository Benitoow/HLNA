#!/usr/bin/env node

// HLNA Auto Setup Script
// Configuration automatique de l'environnement de d√©veloppement HLNA

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

console.log('üöÄ HLNA Auto Setup - Configuration Automatique');
console.log('‚ïê'.repeat(50));

// V√©rification de l'environnement
function checkEnvironment() {
    console.log('üîç V√©rification de l\'environnement...');
    
    // V√©rification Node.js
    const nodeVersion = process.version;
    console.log(`  ‚úÖ Node.js ${nodeVersion}`);
    
    // V√©rification npm
    try {
        const { execSync } = require('child_process');
        const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
        console.log(`  ‚úÖ NPM ${npmVersion}`);
    } catch (error) {
        console.log('  ‚ùå NPM non disponible');
        return false;
    }
    
    return true;
}

// V√©rification des fichiers essentiels
function checkEssentialFiles() {
    console.log('\nüìÅ V√©rification des fichiers essentiels...');
    
    const essentialFiles = [
        'package.json',
        'index.html',
        'chat.html',
        'src/ui/theme-controller.js',
        'assets/themes/dark/theme.css',
        'assets/themes/light/theme.css'
    ];
    
    let allPresent = true;
    
    essentialFiles.forEach(file => {
        if (fs.existsSync(file)) {
            console.log(`  ‚úÖ ${file}`);
        } else {
            console.log(`  ‚ùå ${file} - MANQUANT`);
            allPresent = false;
        }
    });
    
    return allPresent;
}

// Configuration des permissions (Windows)
function setupPermissions() {
    console.log('\nüîê Configuration des permissions...');
    
    try {
        // Rendre les scripts ex√©cutables si n√©cessaire
        const scriptFiles = ['scripts/quick-start.js', 'scripts/validate-project.js'];
        
        scriptFiles.forEach(script => {
            if (fs.existsSync(script)) {
                console.log(`  ‚úÖ ${script} configur√©`);
            }
        });
        
        return true;
    } catch (error) {
        console.log('  ‚ö†Ô∏è  Erreur de configuration des permissions');
        return false;
    }
}

// Installation des d√©pendances
function installDependencies() {
    return new Promise((resolve) => {
        console.log('\nüì¶ Installation des d√©pendances...');
        
        const npm = spawn('npm', ['install'], {
            stdio: 'pipe',
            shell: true
        });
        
        npm.stdout.on('data', (data) => {
            process.stdout.write('.');
        });
        
        npm.stderr.on('data', (data) => {
            // Ignorer les warnings npm
        });
        
        npm.on('close', (code) => {
            if (code === 0) {
                console.log('\n  ‚úÖ D√©pendances install√©es avec succ√®s');
                resolve(true);
            } else {
                console.log('\n  ‚ùå Erreur lors de l\'installation des d√©pendances');
                resolve(false);
            }
        });
    });
}

// Test de validation finale
function runFinalValidation() {
    return new Promise((resolve) => {
        console.log('\nüß™ Test de validation finale...');
        
        const validate = spawn('npm', ['run', 'validate'], {
            stdio: 'pipe',
            shell: true
        });
        
        let output = '';
        
        validate.stdout.on('data', (data) => {
            output += data.toString();
        });
        
        validate.on('close', (code) => {
            if (output.includes('100%') || output.includes('VALIDATION COMPL√àTE')) {
                console.log('  ‚úÖ Validation r√©ussie - Projet pr√™t !');
                resolve(true);
            } else {
                console.log('  ‚ö†Ô∏è  Validation partielle - V√©rifiez les d√©tails');
                resolve(false);
            }
        });
    });
}

// Cr√©ation du fichier de statut
function createStatusFile() {
    console.log('\nüìÑ Cr√©ation du fichier de statut...');
    
    const status = {
        setupDate: new Date().toISOString(),
        nodeVersion: process.version,
        npmVersion: require('child_process').execSync('npm --version', { encoding: 'utf8' }).trim(),
        projectReady: true,
        availableCommands: [
            'npm start - Serveur principal',
            'npm run dev - Mode d√©veloppement',
            'npm run demo - D√©monstration',
            'npm test - Tests complets',
            'npm run validate - Validation',
            'npm run quick - Menu interactif'
        ]
    };
    
    fs.writeFileSync('hlna-status.json', JSON.stringify(status, null, 2));
    console.log('  ‚úÖ Fichier de statut cr√©√©: hlna-status.json');
}

// Affichage du guide de d√©marrage
function showStartupGuide() {
    console.log('\nüéØ CONFIGURATION TERMIN√âE !');
    console.log('‚ïê'.repeat(50));
    console.log('üöÄ Commandes disponibles:');
    console.log('  npm start      - D√©marrer le serveur principal');
    console.log('  npm run dev    - Mode d√©veloppement avec surveillance');
    console.log('  npm run demo   - Page de d√©monstration');
    console.log('  npm test       - Tests complets');
    console.log('  npm run quick  - Menu interactif');
    console.log('  npm run validate - Validation du projet');
    console.log('\nüí° Pour commencer rapidement:');
    console.log('  npm run quick  (menu interactif)');
    console.log('  ou');
    console.log('  npm start      (serveur direct)');
    console.log('\nüåê URLs disponibles:');
    console.log('  http://localhost:8080           - Page principale');
    console.log('  http://localhost:8080/chat.html - Interface de chat');
    console.log('  http://localhost:8080/demo.html - D√©monstration');
    console.log('\n‚úÖ HLNA est pr√™t pour le d√©veloppement !');
    console.log('‚ïê'.repeat(50));
}

// Fonction principale
async function main() {
    try {
        // √âtapes de configuration
        const envOk = checkEnvironment();
        if (!envOk) {
            console.log('‚ùå Environnement non compatible');
            process.exit(1);
        }
        
        const filesOk = checkEssentialFiles();
        if (!filesOk) {
            console.log('‚ùå Fichiers essentiels manquants');
            process.exit(1);
        }
        
        setupPermissions();
        
        const depsOk = await installDependencies();
        if (!depsOk) {
            console.log('‚ùå √âchec de l\'installation des d√©pendances');
            process.exit(1);
        }
        
        const validationOk = await runFinalValidation();
        
        createStatusFile();
        showStartupGuide();
        
        console.log('\nüéâ Configuration automatique termin√©e avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la configuration:', error.message);
        process.exit(1);
    }
}

// D√©marrage si ex√©cut√© directement
if (require.main === module) {
    main();
}

module.exports = { checkEnvironment, checkEssentialFiles, setupPermissions };
