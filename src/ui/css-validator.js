/**
 * HLNA CSS Integration Validator
 * Script de validation pour l'int√©gration CSS compl√®te
 */

class HLNACSSValidator {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.validations = [];
    this.init();
  }

  init() {
    console.log('üîç D√©but de la validation CSS HLNA...');
    this.validateCSSFiles();
    this.validateThemeSystem();
    this.validateResponsiveness();
    this.validateAccessibility();
    this.generateReport();
  }

  /**
   * Validation des fichiers CSS
   */
  validateCSSFiles() {
    const requiredFiles = [
      'src/ui/styles.css',      'src/ui/chat.css',
      'src/ui/theme-enhancements.css',
      'assets/themes/dark/theme.css',
      'assets/themes/light/theme.css',
    ];

    requiredFiles.forEach(file => {
      const link = document.querySelector(`link[href="${file}"]`);
      if (link) {
        this.validations.push(`‚úÖ ${file} charg√©`);
      } else {
        this.errors.push(`‚ùå ${file} manquant`);
      }
    });
  }

  /**
   * Validation du syst√®me de th√®mes
   */
  validateThemeSystem() {
    // V√©rifier la pr√©sence du contr√¥leur de th√®mes
    if (window.hlnaThemeController) {
      this.validations.push('‚úÖ Contr√¥leur de th√®mes initialis√©');

      // Tester les th√®mes
      const currentTheme = window.hlnaThemeController.getCurrentTheme();
      this.validations.push(`‚úÖ Th√®me actuel: ${currentTheme}`);

      // V√©rifier les variables CSS
      this.validateCSSVariables();
    } else {
      this.errors.push('‚ùå Contr√¥leur de th√®mes non trouv√©');
    }

    // V√©rifier le bouton de th√®me
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      this.validations.push('‚úÖ Bouton de basculement de th√®me pr√©sent');
    } else {
      this.errors.push('‚ùå Bouton de basculement manquant');
    }
  }

  /**
   * Validation des variables CSS
   */
  validateCSSVariables() {
    const testElement = document.createElement('div');
    document.body.appendChild(testElement);

    const requiredVariables = [
      '--theme-background',
      '--theme-text',
      '--theme-primary',
      '--theme-transition',
    ];

    requiredVariables.forEach(variable => {
      const value = getComputedStyle(testElement).getPropertyValue(variable);
      if (value.trim()) {
        this.validations.push(`‚úÖ Variable CSS ${variable} d√©finie`);
      } else {
        this.warnings.push(`‚ö†Ô∏è Variable CSS ${variable} non d√©finie`);
      }
    });

    document.body.removeChild(testElement);
  }

  /**
   * Validation de la responsivit√©
   */
  validateResponsiveness() {
    const breakpoints = [
      { name: 'Mobile', width: 480 },
      { name: 'Tablet', width: 768 },
      { name: 'Desktop', width: 1200 },
    ];

    // Simuler les breakpoints (basique)
    breakpoints.forEach(bp => {
      // Pour une validation r√©elle, il faudrait tester avec diff√©rentes tailles
      this.validations.push(`‚úÖ Support ${bp.name} pr√©vu (${bp.width}px)`);
    });
  }

  /**
   * Validation de l'accessibilit√©
   */
  validateAccessibility() {
    // V√©rifier le contraste (basique)
    const body = document.body;
    const backgroundColor = getComputedStyle(body).backgroundColor;
    const color = getComputedStyle(body).color;

    if (backgroundColor && color) {
      this.validations.push('‚úÖ Couleurs de base d√©finies');
    } else {
      this.warnings.push('‚ö†Ô∏è Couleurs de base non d√©tect√©es');
    }

    // V√©rifier les focus
    const focusableElements = document.querySelectorAll(
      'button, input, textarea, [tabindex]'
    );
    if (focusableElements.length > 0) {
      this.validations.push(
        `‚úÖ ${focusableElements.length} √©l√©ments focusables trouv√©s`
      );
    }

    // V√©rifier les transitions
    if (
      window.matchMedia &&
      window.matchMedia('(prefers-reduced-motion: reduce)').matches
    ) {
      this.validations.push('‚úÖ Pr√©f√©rence mouvement r√©duit d√©tect√©e');
    }
  }

  /**
   * G√©n√©ration du rapport de validation
   */
  generateReport() {
    console.log('\nüìä RAPPORT DE VALIDATION CSS HLNA');
    console.log('=====================================');

    console.log(`\n‚úÖ VALIDATIONS (${this.validations.length}):`);
    this.validations.forEach(validation => console.log(validation));

    if (this.warnings.length > 0) {
      console.log(`\n‚ö†Ô∏è AVERTISSEMENTS (${this.warnings.length}):`);
      this.warnings.forEach(warning => console.log(warning));
    }

    if (this.errors.length > 0) {
      console.log(`\n‚ùå ERREURS (${this.errors.length}):`);
      this.errors.forEach(error => console.log(error));
    }

    // Score final
    const total =
      this.validations.length + this.warnings.length + this.errors.length;
    const score = Math.round((this.validations.length / total) * 100);

    console.log(`\nüéØ SCORE FINAL: ${score}%`);

    if (score >= 90) {
      console.log('üèÜ Excellente int√©gration CSS !');
    } else if (score >= 75) {
      console.log(
        'üëç Bonne int√©gration CSS avec quelques am√©liorations possibles'
      );
    } else {
      console.log('‚ö†Ô∏è Int√©gration CSS n√©cessite des corrections');
    }

    console.log('=====================================\n');

    // Retourner le rapport pour usage programmatique
    return {
      score,
      validations: this.validations.length,
      warnings: this.warnings.length,
      errors: this.errors.length,
      details: {
        validations: this.validations,
        warnings: this.warnings,
        errors: this.errors,
      },
    };
  }

  /**
   * Test de performance des th√®mes
   */
  async testThemePerformance() {
    console.log('‚è±Ô∏è Test de performance des th√®mes...');

    if (!window.hlnaThemeController) {
      console.log('‚ùå Impossible de tester - contr√¥leur de th√®mes manquant');
      return;
    }

    const startTime = performance.now();

    // Basculer entre les th√®mes
    window.hlnaThemeController.setTheme('light');
    await new Promise(resolve => setTimeout(resolve, 300));

    window.hlnaThemeController.setTheme('dark');
    await new Promise(resolve => setTimeout(resolve, 300));

    const endTime = performance.now();
    const duration = endTime - startTime;

    console.log(`‚è±Ô∏è Temps de basculement des th√®mes: ${duration.toFixed(2)}ms`);

    if (duration < 1000) {
      console.log('‚úÖ Performance des th√®mes excellente');
    } else {
      console.log('‚ö†Ô∏è Performance des th√®mes √† optimiser');
    }
  }
}

// Auto-ex√©cution si dans le navigateur
if (typeof window !== 'undefined' && document.readyState === 'complete') {
  new HLNACSSValidator();
} else if (typeof window !== 'undefined') {
  window.addEventListener('load', () => {
    new HLNACSSValidator();
  });
}

// Export pour usage externe
if (typeof module !== 'undefined' && module.exports) {
  module.exports = HLNACSSValidator;
}
