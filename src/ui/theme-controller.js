/**
 * HLNA Theme Controller
 * Gestionnaire de th√®mes dynamiques pour l'interface HLNA
 */

class HLNAThemeController {
  constructor() {
    this.currentTheme = 'dark'; // Th√®me par d√©faut
    this.themes = {
      dark: {
        name: 'Sombre',
        cssFile: 'assets/themes/dark/theme.css',
        icon: 'sun',
      },
      light: {
        name: 'Clair',
        cssFile: 'assets/themes/light/theme.css',
        icon: 'moon',
      },
    };

    this.init();
  } /**
   * Initialisation du contr√¥leur de th√®mes
   */
  init() {
    console.log('üé® Initialisation du contr√¥leur de th√®mes HLNA...');

    // Charger le th√®me sauvegard√© ou par d√©faut
    this.loadSavedTheme();

    // Configurer les √©v√©nements
    this.setupEventListeners();

    // Appliquer le th√®me initial
    this.applyTheme(this.currentTheme);

    // Ajouter les am√©liorations visuelles
    this.addPerformanceOptimizations();
    this.addThemeIndicator();
    this.addTransitionEffects();

    // Int√©grer avec les autres syst√®mes HLNA
    this.integrateWithHLNASystems();

    console.log('‚úÖ Contr√¥leur de th√®mes initialis√©');
  }

  /**
   * Configuration des √©couteurs d'√©v√©nements
   */
  setupEventListeners() {
    const themeToggle = document.getElementById('theme-toggle');

    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        this.toggleTheme();
      });
    }

    // √âcouter les changements de pr√©f√©rence syst√®me
    if (window.matchMedia) {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      mediaQuery.addListener(() => {
        if (!this.hasUserPreference()) {
          this.applySystemTheme();
        }
      });
    }

    // √âcouter les raccourcis clavier
    document.addEventListener('keydown', e => {
      // Ctrl/Cmd + Shift + T pour basculer le th√®me
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
        e.preventDefault();
        this.toggleTheme();
      }
    });
  }

  /**
   * Basculer entre les th√®mes
   */
  toggleTheme() {
    const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
    this.setTheme(newTheme);

    // Animation de transition fluide
    this.animateThemeTransition();
  } /**
   * D√©finir un th√®me sp√©cifique
   * @param {string} themeName - Nom du th√®me √† appliquer
   */
  setTheme(themeName) {
    if (!this.themes[themeName]) {
      console.warn(`‚ùå Th√®me "${themeName}" non trouv√©`);
      return;
    }

    const oldTheme = this.currentTheme;
    this.currentTheme = themeName;

    console.log(`üé® Changement de th√®me: ${oldTheme} ‚Üí ${themeName}`);

    // Appliquer le nouveau th√®me
    this.applyTheme(themeName);

    // Sauvegarder la pr√©f√©rence
    this.saveThemePreference(themeName);

    // Afficher la notification de succ√®s
    this.showThemeChangeNotification(themeName);

    // √âmettre un √©v√©nement pour notifier les autres composants
    this.dispatchThemeChangeEvent(oldTheme, themeName);
  }

  /**
   * Appliquer un th√®me √† l'interface
   * @param {string} themeName - Nom du th√®me √† appliquer
   */
  applyTheme(themeName) {
    const theme = this.themes[themeName];

    // Mettre √† jour l'attribut data-theme sur le body
    document.documentElement.setAttribute('data-theme', themeName);
    document.body.setAttribute('data-theme', themeName);

    // Activer le fichier CSS correspondant
    this.activateThemeCSS(themeName);

    // Mettre √† jour l'ic√¥ne du bouton de basculement
    this.updateThemeToggleIcon(theme.icon);

    // Mettre √† jour la meta theme-color
    this.updateMetaThemeColor(themeName);

    // Ajouter des classes d'optimisation de performance
    this.addPerformanceOptimizations();

    // Afficher une notification de succ√®s
    this.showThemeChangeNotification(themeName);

    // Ajouter un indicateur visuel de th√®me
    this.addThemeIndicator();

    // Gestion des animations de transition
    this.addTransitionEffects();

    console.log(`‚ú® Th√®me "${theme.name}" appliqu√©`);
  }

  /**
   * Activer le fichier CSS du th√®me
   * @param {string} themeName - Nom du th√®me
   */
  activateThemeCSS(themeName) {
    // D√©sactiver tous les th√®mes
    Object.keys(this.themes).forEach(theme => {
      const link = document.getElementById(`theme-${theme}`);
      if (link) {
        link.disabled = true;
      }
    });

    // Activer le th√®me s√©lectionn√©
    const activeLink = document.getElementById(`theme-${themeName}`);
    if (activeLink) {
      activeLink.disabled = false;
    }
  }

  /**
   * Mettre √† jour l'ic√¥ne du bouton de basculement
   * @param {string} iconType - Type d'ic√¥ne √† afficher ('sun' ou 'moon')
   */
  updateThemeToggleIcon(iconType) {
    const sunIcon = document.querySelector('.theme-icon-sun');
    const moonIcon = document.querySelector('.theme-icon-moon');

    if (sunIcon && moonIcon) {
      if (iconType === 'sun') {
        sunIcon.style.display = 'block';
        moonIcon.style.display = 'none';
      } else {
        sunIcon.style.display = 'none';
        moonIcon.style.display = 'block';
      }
    }
  }

  /**
   * Mettre √† jour la couleur de th√®me meta
   * @param {string} themeName - Nom du th√®me
   */
  updateMetaThemeColor(themeName) {
    const metaTheme = document.querySelector('meta[name="theme-color"]');
    if (metaTheme) {
      const colors = {
        dark: '#1a1a1a',
        light: '#ffffff',
      };
      metaTheme.setAttribute('content', colors[themeName] || '#FFD700');
    }
  }

  /**
   * Animation de transition entre th√®mes
   */
  animateThemeTransition() {
    const overlay = document.createElement('div');
    overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: ${this.currentTheme === 'dark' ? '#ffffff' : '#1a1a1a'};
            opacity: 0;
            pointer-events: none;
            z-index: 9999;
            transition: opacity 0.2s ease;
        `;

    document.body.appendChild(overlay);

    // Animation d'apparition
    requestAnimationFrame(() => {
      overlay.style.opacity = '0.1';
    });

    // Suppression apr√®s animation
    setTimeout(() => {
      if (overlay.parentNode) {
        overlay.parentNode.removeChild(overlay);
      }
    }, 200);
  }

  /**
   * Charger le th√®me sauvegard√©
   */
  loadSavedTheme() {
    try {
      const savedTheme = localStorage.getItem('hlna-theme');
      if (savedTheme && this.themes[savedTheme]) {
        this.currentTheme = savedTheme;
        console.log(`üìö Th√®me charg√© depuis le stockage: ${savedTheme}`);
      } else {
        // Utiliser le th√®me syst√®me si aucune pr√©f√©rence sauvegard√©e
        this.applySystemTheme();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lors du chargement du th√®me:', error);
      this.currentTheme = 'dark'; // Fallback
    }
  }

  /**
   * Appliquer le th√®me bas√© sur la pr√©f√©rence syst√®me
   */
  applySystemTheme() {
    if (
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: light)').matches
    ) {
      this.currentTheme = 'light';
      console.log('üåû Th√®me clair d√©tect√© depuis les pr√©f√©rences syst√®me');
    } else {
      this.currentTheme = 'dark';
      console.log('üåô Th√®me sombre d√©tect√© depuis les pr√©f√©rences syst√®me');
    }
  }

  /**
   * Sauvegarder la pr√©f√©rence de th√®me
   * @param {string} themeName - Nom du th√®me √† sauvegarder
   */
  saveThemePreference(themeName) {
    try {
      localStorage.setItem('hlna-theme', themeName);
      localStorage.setItem('hlna-theme-timestamp', Date.now().toString());
      console.log(`üíæ Pr√©f√©rence de th√®me sauvegard√©e: ${themeName}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lors de la sauvegarde du th√®me:', error);
    }
  }

  /**
   * V√©rifier si l'utilisateur a une pr√©f√©rence de th√®me
   * @returns {boolean}
   */
  hasUserPreference() {
    return localStorage.getItem('hlna-theme') !== null;
  }

  /**
   * √âmettre un √©v√©nement de changement de th√®me
   * @param {string} oldTheme - Ancien th√®me
   * @param {string} newTheme - Nouveau th√®me
   */
  dispatchThemeChangeEvent(oldTheme, newTheme) {
    const event = new CustomEvent('hlna-theme-change', {
      detail: {
        oldTheme,
        newTheme,
        timestamp: Date.now(),
      },
    });

    document.dispatchEvent(event);
    console.log(
      `üì° √âv√©nement de changement de th√®me √©mis: ${oldTheme} ‚Üí ${newTheme}`
    );
  }

  /**
   * Obtenir le th√®me actuel
   * @returns {string}
   */
  getCurrentTheme() {
    return this.currentTheme;
  }

  /**
   * Obtenir les informations du th√®me actuel
   * @returns {object}
   */
  getCurrentThemeInfo() {
    return {
      name: this.currentTheme,
      info: this.themes[this.currentTheme],
      timestamp: Date.now(),
    };
  }

  /**
   * Nettoyer et d√©truire le contr√¥leur
   */
  destroy() {
    // Supprimer les √©couteurs d'√©v√©nements si n√©cessaire
    console.log('üßπ Nettoyage du contr√¥leur de th√®mes');
  }

  /**
   * Ajouter des classes d'optimisation de performance
   */
  addPerformanceOptimizations() {
    // Ajouter la classe d'optimisation aux √©l√©ments principaux
    const elementsToOptimize = [
      document.body,
      document.querySelector('.chat-container-new'),
      document.querySelector('.context-panel'),
      document.querySelector('.input-area-new'),
    ];

    elementsToOptimize.forEach(element => {
      if (element) {
        element.classList.add('theme-optimized');
      }
    });
  }

  /**
   * Afficher une notification de succ√®s apr√®s changement de th√®me
   * @param {string} themeName - Nom du nouveau th√®me
   */
  showThemeChangeNotification(themeName) {
    const notification = document.createElement('div');
    notification.className = 'theme-change-success';
    notification.textContent = `Th√®me ${this.themes[themeName].name} activ√©`;

    document.body.appendChild(notification);

    // Supprimer apr√®s l'animation
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 2000);
  }

  /**
   * Ajouter un indicateur visuel de th√®me
   */
  addThemeIndicator() {
    if (!document.querySelector('.theme-indicator')) {
      const indicator = document.createElement('div');
      indicator.className = 'theme-indicator';
      document.body.appendChild(indicator);
    }
  }

  /**
   * Gestion des animations de transition
   */
  addTransitionEffects() {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        // Ajouter classe d'animation au bouton
        themeToggle.classList.add('switching');
        setTimeout(() => {
          themeToggle.classList.remove('switching');
        }, 400);

        // Ajouter effet de transition globale
        document.body.classList.add('theme-transitioning');
        setTimeout(() => {
          document.body.classList.remove('theme-transitioning');
        }, 600);
      });
    }
  }

  /**
   * Int√©gration avec les autres syst√®mes HLNA
   */
  integrateWithHLNASystems() {
    // √âcouter les √©v√©nements du chat pour adapter le th√®me
    document.addEventListener('hlna-message-sent', () => {
      this.updateThemeBasedOnActivity();
    });

    document.addEventListener('hlna-mode-change', e => {
      this.adaptThemeToMode(e.detail.mode);
    });

    // Synchroniser avec le syst√®me d'analytics
    if (window.hlnaAnalytics) {
      document.addEventListener('hlna-theme-change', e => {
        window.hlnaAnalytics.trackThemeChange(e.detail.newTheme);
      });
    }
  }

  /**
   * Adapter le th√®me selon l'activit√© de l'utilisateur
   */
  updateThemeBasedOnActivity() {
    const hour = new Date().getHours();

    // Suggestion automatique de th√®me selon l'heure (si pas de pr√©f√©rence utilisateur)
    if (!this.hasUserPreference()) {
      if (hour >= 6 && hour < 18) {
        if (this.currentTheme !== 'light') {
          console.log('üí° Suggestion de th√®me clair pour la journ√©e');
        }
      } else {
        if (this.currentTheme !== 'dark') {
          console.log('üåô Suggestion de th√®me sombre pour le soir');
        }
      }
    }
  }

  /**
   * Adapter le th√®me selon le mode HLNA
   * @param {string} mode - Mode HLNA actuel
   */
  adaptThemeToMode(mode) {
    // Ajuster subtilement l'interface selon le mode
    const modeClasses = {
      creative: 'theme-mode-creative',
      analytical: 'theme-mode-analytical',
      natural: 'theme-mode-natural',
    };

    // Supprimer les anciennes classes de mode
    Object.values(modeClasses).forEach(className => {
      document.body.classList.remove(className);
    });

    // Ajouter la nouvelle classe de mode
    if (modeClasses[mode]) {
      document.body.classList.add(modeClasses[mode]);
    }
  }
}

// Export pour utilisation globale
window.HLNAThemeController = HLNAThemeController;

// Auto-initialisation si le DOM est pr√™t
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.hlnaThemeController = new HLNAThemeController();
  });
} else {
  // DOM d√©j√† charg√©
  window.hlnaThemeController = new HLNAThemeController();
}
